/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TrustworthyGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.Trustworthy.Model");
		private final Assignment cRoomsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRoomsRoomParserRuleCall_0 = (RuleCall)cRoomsAssignment.eContents().get(0);
		
		//Model:
		//	rooms+=Room*;
		@Override public ParserRule getRule() { return rule; }
		
		//rooms+=Room*
		public Assignment getRoomsAssignment() { return cRoomsAssignment; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_0() { return cRoomsRoomParserRuleCall_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.Trustworthy.Room");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRoomKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSensorPartAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSensorsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSensorsSensorParserRuleCall_1_2_0 = (RuleCall)cSensorsAssignment_1_2.eContents().get(0);
		
		//Room:
		//	'Room' name=ID | {SensorPart} 'with' sensors+=Sensor*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=ID | {SensorPart} 'with' sensors+=Sensor*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Room' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'Room'
		public Keyword getRoomKeyword_0_0() { return cRoomKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//{SensorPart} 'with' sensors+=Sensor*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SensorPart}
		public Action getSensorPartAction_1_0() { return cSensorPartAction_1_0; }
		
		//'with'
		public Keyword getWithKeyword_1_1() { return cWithKeyword_1_1; }
		
		//sensors+=Sensor*
		public Assignment getSensorsAssignment_1_2() { return cSensorsAssignment_1_2; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_1_2_0() { return cSensorsSensorParserRuleCall_1_2_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.Trustworthy.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAmountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAmountINTTerminalRuleCall_0_0 = (RuleCall)cAmountAssignment_0.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPresetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPresetIDTerminalRuleCall_3_0 = (RuleCall)cPresetAssignment_3.eContents().get(0);
		private final Keyword cPresetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sensor:
		//	amount=INT 'sensor' 'and' preset=ID 'preset';
		@Override public ParserRule getRule() { return rule; }
		
		//amount=INT 'sensor' 'and' preset=ID 'preset'
		public Group getGroup() { return cGroup; }
		
		//amount=INT
		public Assignment getAmountAssignment_0() { return cAmountAssignment_0; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_0_0() { return cAmountINTTerminalRuleCall_0_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//'and'
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
		
		//preset=ID
		public Assignment getPresetAssignment_3() { return cPresetAssignment_3; }
		
		//ID
		public RuleCall getPresetIDTerminalRuleCall_3_0() { return cPresetIDTerminalRuleCall_3_0; }
		
		//'preset'
		public Keyword getPresetKeyword_4() { return cPresetKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final RoomElements pRoom;
	private final SensorElements pSensor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TrustworthyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRoom = new RoomElements();
		this.pSensor = new SensorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.Trustworthy".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rooms+=Room*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Room:
	//	'Room' name=ID | {SensorPart} 'with' sensors+=Sensor*;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Sensor:
	//	amount=INT 'sensor' 'and' preset=ID 'preset';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
